[
    {
        "key": "ctrl+d",
        "command": "editor.action.deleteLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+k",
        "command": "-editor.action.deleteLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+down",
        "command": "editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+up",
        "command": "editor.action.copyLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "editor.action.insertCursorAtEndOfEachLineSelected",
        "key": "ctrl+shift+d",
        "when": "editorTextFocus"
    },
    {
        "command": "workbench.action.files.save",
        "key": "ctrl+s"
    },
    {
        "key": "shift+cmd+numpad_divide",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+cmd+c",
        "command": "-editor.action.commentLine",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+numpad_divide",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+cmd+q",
        "command": "-editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+numpad_divide",
        "command": "editor.action.blockComment",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+cmd+w",
        "command": "-editor.action.blockComment",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+cmd+d",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "shift+ctrl+d",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "cmd+shift+a",
        "command": "HookyQR.beautify",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+c",
        "command": "editor.action.clipboardCopyAction",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+x",
        "command": "editor.action.clipboardCutAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+v",
        "command": "editor.action.clipboardPasteAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+/",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+cmd+alt+f",
        "command": "editor.action.formatDocument",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+f",
        "command": "eslint.executeAutofix",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+left",
        "command": "-cursorWordStartLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "alt+left",
        "command": "-cursorWordStartLeft",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+left",
        "command": "-cursorWordPartLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "alt+left",
        "command": "-cursorWordPartLeft",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+cmd+left",
        "command": "-cursorColumnSelectLeft",
        "when": "textInputFocus"
    },
    {
        "key": "alt+right",
        "command": "-cursorWordPartRight",
        "when": "textInputFocus"
    },
    {
        "key": "shift+alt+right",
        "command": "-cursorWordPartRightSelect",
        "when": "textInputFocus"
    },
    {
        "key": "alt+left",
        "command": "cursorWordEndLeft"
    },
    {
        "key": "shift+alt+left",
        "command": "cursorWordEndLeftSelect"
    },
    {
        "key": "shift+alt+.",
        "command": "-gitlens.diffWithWorking",
        "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "shift+alt+.",
        "command": "-gitlens.diffWithWorkingInDiff",
        "when": "isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "alt+cmd+.",
        "command": "-editor.action.autoFix",
        "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/"
    },
    {
        "key": "shift+cmd+numpad6",
        "command": "editor.action.inPlaceReplace.down",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+.",
        "command": "-editor.action.inPlaceReplace.down",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+f",
        "command": "breadcrumbs.focusAndSelect",
        "when": "breadcrumbsPossible"
    },
    {
        "key": "shift+cmd+.",
        "command": "-breadcrumbs.focusAndSelect",
        "when": "breadcrumbsPossible"
    },
    {
        "key": "ctrl+shift+f",
        "command": "breadcrumbs.toggleToOn",
        "when": "!config.breadcrumbs.enabled"
    },
    {
        "key": "shift+cmd+.",
        "command": "-breadcrumbs.toggleToOn",
        "when": "!config.breadcrumbs.enabled"
    },
    {
        "key": "shift+cmd+.",
        "command": "auto-close-tag.closeTag"
    },
    {
        "key": "alt+cmd+.",
        "command": "-auto-close-tag.closeTag"
    },
    {
        "key": "shift+cmd+i",
        "command": "extension.vuejsAutoImport",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+/",
        "command": "-extension.vuejsAutoImport",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+cmd+up",
        "command": "editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+up",
        "command": "-editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+cmd+down",
        "command": "editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+down",
        "command": "-editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    }
]
